{"version":3,"file":"static/js/871.67d80949.chunk.js","mappings":"4MAsCA,UAhCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBN,EAASI,GAAYG,MAAMC,QAAQC,MACtD,GAAE,CAACT,KAGF,0BACE,6BACGG,EAAQO,OAAS,GAChB,iEAEA,wBACGP,EAAQQ,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,2BACE,qCAAaD,MACb,uBAAIC,OAFGC,EAAAA,EAAAA,MAKZ,SAMZ,C,2MChCKC,EAAU,mCACVC,EAAW,gCAIXC,EAAiB,mCAAG,WAAMC,GAAN,gGAECC,IAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHrB,cAEhBK,EAFgB,yBAMfF,EAAUE,EAASC,KAAKC,UANT,gCAQtBd,QAAQe,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARd,yDAAH,sDAcjBC,EAAc,mCAAG,WAAO1B,EAAS2B,GAAhB,gGAEIR,IAAAA,IAAA,UAClBH,EADkB,iBACDhB,EADC,oBACkBe,EADlB,oBAFJ,cAEbK,EAFa,yBAMZO,EAASP,EAASC,OANN,gCAQnBb,QAAQe,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARjB,yDAAH,wDAcdG,EAAc,mCAAG,WAAO5B,EAAS6B,GAAhB,gGAEIV,IAAAA,IAAA,UAClBH,EADkB,iBACDhB,EADC,4BAC0Be,EAD1B,oBAFJ,cAEbK,EAFa,yBAMZS,EAAQT,EAASC,KAAKS,OANV,gCAQnBtB,QAAQe,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARjB,yDAAH,wDAcdnB,EAAiB,mCAAG,WAAON,EAASI,GAAhB,gGAECe,IAAAA,IAAA,UAClBH,EADkB,iBACDhB,EADC,4BAC0Be,EAD1B,oBAFD,cAEhBK,EAFgB,yBAMfhB,EAAWgB,EAASC,KAAKC,UANV,gCAQtBd,QAAQe,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARd,yDAAH,wDAcjBM,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,gGAECd,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BiB,EAD/B,gCAFD,cAEhBZ,EAFgB,yBAKfa,EAAkBb,EAASC,KAAKC,UALjB,gCAOtBd,QAAQe,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UAPd,yDAAH,uD,wDC9DhB,IAkBIX,EAAS,eAACoB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/Reviews/Reviews.jsx","services/apiSupport.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/apiSupport';\nimport { nanoid } from 'nanoid';\n\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId, setReviews).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <div>\n      <section>\n        {reviews.length < 1 ? (\n          <p>Sorry, the reviews is not available!</p>\n        ) : (\n          <ul>\n            {reviews.map(({ author, content }) => {\n              return (\n                <li key={nanoid()}>\n                  <h4>Author: {author}</h4>\n                  <p>{content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n};\n\n\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '34b039d9928c0cbb29ba3089b029dd2e';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// fetching function for the most popular movies of the day\n\nconst fetchTrendyMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching function the movie by id\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching characters in the movie by the id of the movie\n\nconst fetchMovieCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching reviews about the movie by the id of the movie\n\nconst fetchMovieReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching the movies by query\n\nconst fetchMovieByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    return setSearchedMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport {\n  fetchMovieById,\n  fetchTrendyMovies,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMovieByQuery,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","catch","console","error","length","map","author","content","nanoid","API_KEY","BASE_URL","fetchTrendyMovies","setMovies","axios","response","data","results","log","name","message","fetchMovieById","setMovie","fetchMovieCast","setCast","cast","fetchMovieByQuery","query","setSearchedMovies","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}